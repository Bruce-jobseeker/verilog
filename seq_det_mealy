module seq_det_mealy(
    input clk,
    input rst,
    input din_bit,
    output detect_out
    );
    
    reg [2:0] state_reg, next_state;
    
    parameter start=3'b000;
    parameter st1=3'b001;
    parameter st2=3'b010;
    parameter st3=3'b011;
    parameter st4=3'b100;
    
    always@(state_reg, din_bit) begin
    case(state_reg)
    start : if(din_bit==0) next_state=st1;
            else if(din_bit==1) next_state=start;
            else next_state=start;
    st1 : if(din_bit==0) next_state=st1;
          else if(din_bit==1) next_state=st2;
          else next_state=start;
    st2 : if(din_bit==0) next_state=st1;
          else if(din_bit==1) next_state=st3;
          else next_state=start;
    st3 : if(din_bit==0) next_state=st4;
          else if(din_bit==1) next_state=start;
          else next_state=start;
    st4 : if(din_bit==0) next_state=st1;
          else if(din_bit==1) next_state=st2;
          else next_state=start;
     default next_state=start;
     endcase 
     end
     
     always@(posedge clk, posedge rst) begin
     if(rst) state_reg<=start;
     else state_reg<=next_state;
     end
     
     assign detect_out=((state_reg==st3) && (din_bit==0)) ? 1:0;
    
endmodule
